
import Data.List

data Cliente = Cliente { nombre::String
                        ,resistencia::Int
                        ,amigos::[Cliente]
                        ,yaTomo::[(Bebida)]} deriving(Show,Eq)

data Accion = Tomar Bebida | AgregarAmigo Cliente | Rescatarse Int deriving (Show)

data Bebida = Klusener String | GrogXD | Tintico | Soda Int | JarraLoca deriving (Show, Eq)

data Itinerario = UnItinerario {titulo :: String,
                                duracion :: Float,
                                acciones :: [Accion]} deriving (Show)


rodri = Cliente "Rodri" 55 [] [(Tintico)]
marcos = Cliente "Marcos" 40 [rodri] [(Klusener "guinda")]
cristian = Cliente "Cristian" 2 [] [(GrogXD),(JarraLoca)]
ana = Cliente "Ana" 120 [marcos,rodri] []
chuckNorris =  Cliente "Chuck" 1000 [ana] sodasDelUniverso
robertoCarlos = Cliente "Roberto Carlos" 165 [] []
sodasDelUniverso = map Soda [1..]



intensidad :: Itinerario -> Float
intensidad (UnItinerario _ durac acciones) = genericLength acciones / durac

itineMasIntenso::Cliente->[Itinerario]->Cliente
itineMasIntenso cliente listaDeItine = realizarItin (elMasIntenso listaDeItine) cliente

elMasIntenso::[Itinerario]->Itinerario
elMasIntenso listaDeItine = foldl1 esMasIntenso listaDeItine

esMasIntenso x y 
	| intensidad x > intensidad y = x
	| otherwise = y

itinerarioBasico = UnItinerario "Itinerario Basico" 5 [Tomar JarraLoca, Tomar (Klusener "chocolate"), Rescatarse 2, Tomar (Klusener "huevo")]
mezclaExplosiva = UnItinerario "Mezcla Explosiva" 2.5 [Tomar GrogXD, Tomar GrogXD, Tomar (Klusener "huevo"), Tomar (Klusener "Frutilla")]
salidaDeAmigos = UnItinerario "Salida de Amigos" 1 [Tomar (Soda 1), Tomar Tintico, AgregarAmigo robertoCarlos, Tomar JarraLoca] 

realizarItin :: Itinerario -> Cliente -> Cliente
realizarItin (UnItinerario _ _ acciones) client = foldl realizarAccion client acciones

realizarAccion :: Cliente -> Accion -> Cliente
realizarAccion cliente (Tomar bebida) = tomar cliente bebida
realizarAccion cliente (AgregarAmigo amigo) = agregarAmigo cliente amigo
realizarAccion cliente (Rescatarse tiempo) = rescatarse cliente tiempo



tomar::Cliente->Bebida->Cliente

tomar (Cliente name stamina friends bebidas) (Klusener sabor) = Cliente name (bajarResistencia (length sabor) stamina) friends (bebidas++[(Klusener sabor)])

tomar (Cliente name _ friends bebidas) (GrogXD)  = Cliente name 0 friends (bebidas++[(GrogXD)])

tomar (Cliente name stamina friends bebidas) (Tintico)  = Cliente name (subirResistencia (5 * length friends) stamina) friends (bebidas++[Tintico])

tomar (Cliente name stamina friends bebidas) (Soda fuerza) = Cliente (agregarERP fuerza name) stamina friends (bebidas++[(Soda fuerza)])

tomar (Cliente name stamina friends bebidas) (JarraLoca) = Cliente name (bajarResistencia 10 stamina) (pasarJarra friends) (bebidas++[(JarraLoca)])

pasarJarra :: [Cliente] -> [Cliente]
pasarJarra [] = []
pasarJarra (unCliente : elResto) = tomar unCliente (JarraLoca) : (pasarJarra elResto)

rescatarse::Cliente->Int->Cliente
rescatarse (Cliente name stamina friends bebidas)  hora 
	| hora > 3 = Cliente name (stamina+200) friends bebidas
	| otherwise = Cliente name (stamina+100) friends bebidas


agregarERP::Int->String->String
agregarERP fuerza nombre = "e"++concat(replicate fuerza "r")++"p"++nombre

bajarResistencia::Int->Int -> Int
bajarResistencia disminuir resistencia = resistencia - disminuir

subirResistencia::Int->Int-> Int
subirResistencia subir resistencia = resistencia + subir


comoEsta::Cliente->String
comoEsta (Cliente _ stamina friends _)
	| stamina > 50 = "fresco"
	| length(friends) > 1 = "piola"
	| otherwise = "duro"


agregarAmigo::Cliente->Cliente->Cliente
agregarAmigo (Cliente name stamina friends bebidas) otroCliente 
	| puedeAgregar (Cliente name stamina friends bebidas) otroCliente = Cliente name stamina (friends ++[otroCliente]) bebidas
	| otherwise = Cliente name stamina friends bebidas

puedeAgregar:: Cliente -> Cliente-> Bool
puedeAgregar (Cliente name stamina friends _) (Cliente name2 stamina2 friends2 bebidas2)
 	| name == name2 = False
 	| elem (Cliente name2 stamina2 friends2 bebidas2) (friends) = False
 	| otherwise = True


tomarTragos:: Cliente -> [Bebida] -> Cliente
tomarTragos  = foldl tomar  

dameOtro::Cliente -> Cliente
dameOtro cliente = tomar cliente (last (yaTomo cliente)) 

cualesPuedeTomar::Cliente->[Bebida]->[Bebida]
cualesPuedeTomar cliente= filter (bebidasNoMortales cliente)

bebidasNoMortales::Cliente->Bebida->Bool
bebidasNoMortales cliente bebida = resistencia (tomar cliente bebida ) > 0 
	
cuantasPuedeTomar::Cliente->[Bebida]->Int
cuantasPuedeTomar cliente listaBebidas = length ( cualesPuedeTomar cliente listaBebidas)
