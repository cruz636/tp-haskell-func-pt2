import Data.List

data Cliente = Cliente { nombre::String
                        ,resistencia::Int
                        ,amigos::[Cliente]
                        ,yaTomo::[(Bebida)]} deriving(Show,Eq)

data Accion = Tomar Bebida | AgregarAmigo Cliente | Rescatarse Int deriving (Show)

data Bebida = Klusener String | GrogXD | Tintico | Soda Int | JarraLoca deriving (Show, Eq)

data Itinerario = UnItinerario {titulo :: String,
                                duracion :: Float,
                                acciones :: [Accion]} deriving (Show)


rodri = Cliente "Rodri" 55 [] [(Tintico)]
marcos = Cliente "Marcos" 40 [rodri] [(Klusener "guinda")]
cristian = Cliente "Cristian" 2 [] [(GrogXD),(JarraLoca)]
ana = Cliente "Ana" 120 [marcos,rodri] []
chuckNorris =  Cliente "Chuck" 1000 [ana] sodasDelUniverso
robertoCarlos = Cliente "Roberto Carlos" 165 [] []
sodasDelUniverso = map Soda [1..]



intensidad :: Itinerario -> Float
intensidad (UnItinerario _ duracion acciones) = genericLength acciones / duracion

itineMasIntenso::Cliente->[Itinerario]->Cliente
itineMasIntenso cliente listaDeItine = realizarItin (elMasIntenso listaDeItine) cliente

elMasIntenso::[Itinerario]->Itinerario
elMasIntenso = foldl1 esMasIntenso 

esMasIntenso x y 
	| intensidad x > intensidad y = x
	| otherwise = y

itinerarioBasico = UnItinerario "Itinerario Basico" 5 [Tomar JarraLoca, Tomar (Klusener "chocolate"), Rescatarse 2, Tomar (Klusener "huevo")]
mezclaExplosiva = UnItinerario "Mezcla Explosiva" 2.5 [Tomar GrogXD, Tomar GrogXD, Tomar (Klusener "huevo"), Tomar (Klusener "Frutilla")]
salidaDeAmigos = UnItinerario "Salida de Amigos" 1 [Tomar (Soda 1), Tomar Tintico, AgregarAmigo robertoCarlos, Tomar JarraLoca] 

realizarItin :: Itinerario -> Cliente -> Cliente
realizarItin (UnItinerario _ _ acciones) client = foldl realizarAccion client acciones

realizarAccion :: Cliente -> Accion -> Cliente
realizarAccion cliente (Tomar bebida) = tomar cliente bebida
realizarAccion cliente (AgregarAmigo amigo) = agregarAmigo cliente amigo
realizarAccion cliente (Rescatarse tiempo) = rescatarse cliente tiempo


tomar::Cliente->Bebida->Cliente

tomar cliente (Klusener sabor) = cliente {resistencia=(bajarResistencia (length sabor) (resistencia cliente)),yaTomo=((yaTomo cliente)++[(Klusener sabor)])}

tomar cliente GrogXD  = cliente{ resistencia = 0, yaTomo =((yaTomo cliente)++[(GrogXD)])}

tomar cliente Tintico  = cliente {resistencia =(subirResistencia (5 * length (amigos cliente)) (resistencia cliente)), yaTomo =((yaTomo cliente)++[Tintico])}

tomar cliente (Soda fuerza) = cliente {nombre=(agregarERP fuerza (nombre cliente)), yaTomo= ((yaTomo cliente)++[(Soda fuerza)])}

tomar cliente JarraLoca = cliente {resistencia = (bajarResistencia 10 (resistencia cliente)),amigos= (pasarJarra (amigos cliente)), yaTomo=((yaTomo cliente)++[(JarraLoca)])}

pasarJarra :: [Cliente] -> [Cliente]
pasarJarra [] = []
pasarJarra (unCliente : elResto) = tomar unCliente (JarraLoca) : (pasarJarra elResto)


rescatarse::Cliente->Int->Cliente
rescatarse cliente  hora 
	| hora > 3 = cliente { resistencia = (resistencia cliente)+200}
	| otherwise = cliente{ resistencia = (resistencia cliente) + 100}


agregarERP::Int->String->String
agregarERP fuerza nombre = "e"++concat(replicate fuerza "r")++"p"++nombre

bajarResistencia::Int->Int -> Int
bajarResistencia disminuir resistencia = resistencia - disminuir

subirResistencia::Int->Int-> Int
subirResistencia subir resistencia = resistencia + subir

comoEsta::Cliente->String
comoEsta (Cliente _ stamina friends _)
	| stamina > 50 = "fresco"
	| length(friends) > 1 = "piola"
	| otherwise = "duro"

agregarAmigo::Cliente->Cliente->Cliente
agregarAmigo cliente otroCliente 
	| puedeAgregar cliente otroCliente = cliente{ amigos = (amigos cliente ++[otroCliente]) }
	| otherwise = cliente


puedeAgregar:: Cliente -> Cliente-> Bool
puedeAgregar cliente otroCliente = not (nombre cliente == nombre otroCliente) && not( elem otroCliente (amigos cliente))

tomarTragos:: Cliente -> [Bebida] -> Cliente
tomarTragos  = foldl tomar  

dameOtro::Cliente -> Cliente
dameOtro cliente = tomar cliente (last (yaTomo cliente)) 

cualesPuedeTomar::Cliente->[Bebida]->[Bebida]
cualesPuedeTomar cliente= filter (bebidasNoMortales cliente)

bebidasNoMortales::Cliente->Bebida->Bool
bebidasNoMortales cliente bebida = resistencia (tomar cliente bebida ) > 0 
	
cuantasPuedeTomar::Cliente->[Bebida]->Int
cuantasPuedeTomar cliente listaBebidas = length ( cualesPuedeTomar cliente listaBebidas)
